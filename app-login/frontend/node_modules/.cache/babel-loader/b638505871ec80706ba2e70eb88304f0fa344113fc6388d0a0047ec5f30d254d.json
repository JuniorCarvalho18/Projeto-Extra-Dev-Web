{"ast":null,"code":"import axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:3001'\n});\n\n// Interceptor de requisição: adiciona token\naxiosInstance.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('token');\n  if (token && (config.url !== '/login' || config.url !== '')) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Interceptor de resposta: detecta 401 e redireciona\naxiosInstance.interceptors.response.use(response => response, error => {\n  const originalRequest = error.config;\n\n  // Se for rota de login, não intercepta\n  if (originalRequest.url.includes('/login')) {\n    return Promise.reject(error);\n  }\n  if (error.response && error.response.status === 401) {\n    alert(\"Sessão expirada. Faça login novamente.\");\n    sessionStorage.removeItem('token');\n    sessionStorage.removeItem('role');\n    sessionStorage.removeItem('username');\n    sessionStorage.removeItem('photo');\n    sessionStorage.removeItem('fullName');\n    window.location.href = '/login';\n    window.location.reload();\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","interceptors","request","use","config","token","sessionStorage","getItem","url","headers","response","error","originalRequest","includes","Promise","reject","status","alert","removeItem","window","location","href","reload"],"sources":["C:/GitHub/Projeto-Extra-Dev-Web/app-login/frontend/src/services/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:3001'\n});\n\n// Interceptor de requisição: adiciona token\naxiosInstance.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('token');\n  if (token && (config.url !== '/login' || config.url !== '')) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Interceptor de resposta: detecta 401 e redireciona\naxiosInstance.interceptors.response.use(\n  response => response,\n  error => {\n    const originalRequest = error.config;\n\n    // Se for rota de login, não intercepta\n    if (originalRequest.url.includes('/login')) {\n      return Promise.reject(error);\n    }\n    \n    if (error.response && error.response.status === 401) {\n      alert(\"Sessão expirada. Faça login novamente.\");\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('role');\n      sessionStorage.removeItem('username');\n      sessionStorage.removeItem('photo');\n      sessionStorage.removeItem('fullName');\n      window.location.href = '/login';\n      window.location.reload(); \n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC/C,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EAC7C,IAAIF,KAAK,KAAKD,MAAM,CAACI,GAAG,KAAK,QAAQ,IAAIJ,MAAM,CAACI,GAAG,KAAK,EAAE,CAAC,EAAE;IAC3DJ,MAAM,CAACK,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUJ,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,aAAa,CAACG,YAAY,CAACS,QAAQ,CAACP,GAAG,CACrCO,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EACP,MAAMC,eAAe,GAAGD,KAAK,CAACP,MAAM;;EAEpC;EACA,IAAIQ,eAAe,CAACJ,GAAG,CAACK,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAC1C,OAAOC,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;EAC9B;EAEA,IAAIA,KAAK,CAACD,QAAQ,IAAIC,KAAK,CAACD,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;IACnDC,KAAK,CAAC,wCAAwC,CAAC;IAC/CX,cAAc,CAACY,UAAU,CAAC,OAAO,CAAC;IAClCZ,cAAc,CAACY,UAAU,CAAC,MAAM,CAAC;IACjCZ,cAAc,CAACY,UAAU,CAAC,UAAU,CAAC;IACrCZ,cAAc,CAACY,UAAU,CAAC,OAAO,CAAC;IAClCZ,cAAc,CAACY,UAAU,CAAC,UAAU,CAAC;IACrCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IAC/BF,MAAM,CAACC,QAAQ,CAACE,MAAM,CAAC,CAAC;EAC1B;EACA,OAAOR,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}